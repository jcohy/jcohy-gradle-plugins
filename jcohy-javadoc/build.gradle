buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.21")
	}
}

plugins {
	id "java-gradle-plugin"
	id 'com.gradle.plugin-publish' version '0.18.0'
	id 'maven-publish'
	id "io.spring.nohttp" version "0.0.2.RELEASE"
	id "nebula.integtest" version "7.0.7"
}

dependencies {
	implementation gradleApi()
	testImplementation 'org.assertj:assertj-core:3.+'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.+'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.+'
}

pluginBundle {
	website = 'https://github.com/jcohy/jcohy-gradle-plugins'
	vcsUrl = 'https://github.com/jcohy/jcohy-gradle-plugins'
	description = project.description
	tags = ['Javadoc']
}

gradlePlugin {
	plugins {
		javadocConventionsPlugin {
			id = 'com.jcohy.gradle.javadoc-conventions'
			displayName = 'Javadoc Conventions Plugin'
			description = 'Defaults the Javadoc'
			implementationClass = 'com.jcohy.gradle.javadoc.JavadocConventionsPlugin'
		}
		javadocPlugin {
			id = 'com.jcohy.gradle.javadoc'
			displayName = 'Javadoc Plugin'
			description = 'Sets up a Project with Javadoc Task. Used by AggregateJavadocPlugin to setup aggregate Javadoc too'
			implementationClass = 'com.jcohy.gradle.javadoc.JavadocPlugin'
		}
		aggregateJavadocPlugin {
			id = 'com.jcohy.gradle.javadoc-aggregate'
			displayName = 'Aggregate Javadoc Plugin'
			description = 'Sets up a Project with Aggregate Javadoc Task'
			implementationClass = 'com.jcohy.gradle.javadoc.AggregateJavadocPlugin'
		}
	}
}
dependencyLocking {
	lockAllConfigurations()
}
tasks.withType(Test).configureEach {
	useJUnitPlatform()
}
