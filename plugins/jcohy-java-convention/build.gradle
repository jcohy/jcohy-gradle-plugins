plugins {
	id 'io.github.jcohy.gradle-plugin-module'
}

description "The plugin provides configuration with three conventions. Conventions when using the JavaBasePlugin, conventions when using the MavenPublishPlugin plugin, conventions when using the AsciidoctorJPlugin plugin"

dependencies {
	implementation(project(":plugins:jcohy-asciidoctor"))
	implementation("org.springframework.boot:spring-boot-gradle-plugin")
	implementation("io.spring.gradle:dependency-management-plugin")
	implementation('com.fasterxml.jackson.core:jackson-databind')
	implementation("commons-codec:commons-codec")
	implementation("org.apache.maven:maven-embedder")
	implementation("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin")
	implementation("org.asciidoctor:asciidoctor-gradle-jvm")
	implementation("org.gradle:test-retry-gradle-plugin")
	implementation("org.springframework:spring-core")
	implementation("org.springframework:spring-web")
	implementation("io.spring.javaformat:spring-javaformat-gradle-plugin")
	testImplementation('com.alibaba:fastjson')
	testImplementation("com.google.code.gson:gson")
	testImplementation('org.apache.logging.log4j:log4j-core')
}

gradlePlugin {
	plugins {
		conventionsPlugin {
			id = 'io.github.jcohy.gradle.convention'
			displayName = "convention-plugins"
			implementationClass = 'io.github.jcohy.gradle.conventions.ConventionsPlugin'
			description = project.description
			tags.set (['Java', 'Deployed', "Asciidoctor"])
		}
		optionalPlugin {
			id = 'io.github.jcohy.gradle.optional-dependencies'
			displayName = "optional-dependencies"
			implementationClass = 'io.github.jcohy.gradle.optional.OptionalDependenciesPlugin'
			description = 'Added support for Maven-style optional dependencies.'
			tags.set (['dependencies', 'optional', 'OptionalDependencies'])
		}
		testFailuresPlugin {
			id = 'io.github.jcohy.gradle.test-failures'
			displayName = "test-failures"
			implementationClass = 'io.github.jcohy.gradle.testing.TestFailuresPlugin'
			description = 'Added support for Maven-style optional dependencies.'
			tags.set (['test'])
		}
	}
}
