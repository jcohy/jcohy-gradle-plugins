<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
		"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
		"https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="com.puppycrawl.tools.checkstyle.Checker">
	<property name="localeCountry" value="CN"/>
	<property name="localeLanguage" value="cn"/>
	<!-- Root Checks -->
	<module name="com.jcohy.checkstyle.check.SpringHeaderCheck">
		<property name="fileExtensions" value="java"/>
		<property name="headerType" value="${headerType}"/>
		<property name="headerFile" value="${headerFile}" default=""/>
		<property name="headerCopyrightPattern" value="${headerCopyrightPattern}"/>
	</module>

	<!-- 检查文件是否以一个新行结束-->
	<module name="com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck"/>

<!--	&lt;!&ndash;【强制】采用 4 个空格缩进，禁止使用 tab 字符。 &ndash;&gt;-->
<!--	<module name="com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck">-->
<!--		<property name="eachLine" value="true"/>-->
<!--	</module>-->

	<!-- 尺寸超规 -->
	<!-- 【强制】单行字符数限不超过 120 个，超出需要换行时 -->
	<module name="com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck">
		<property name="fileExtensions" value="java"/>
		<property name="max" value="120"/>
		<property name="ignorePattern"
				  value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
	</module>

	<!-- TreeWalker Checks -->
	<module name="com.puppycrawl.tools.checkstyle.TreeWalker">
		<!-- 注解 -->
		<!-- 检查注解风格，这项检查可以控制要使用的注解的样式。-->
		<module name="com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck">
			<property name="elementStyle" value="compact"/>
		</module>
		<!-- 当出现 @inheritDoc 的 Javadoc 标签时，验证 java.lang.Override 注解是否出现。-->
		<module name="com.puppycrawl.tools.checkstyle.checks.annotation.MissingOverrideCheck"/>
		<!-- 这项检查可以确保所有包的注解都在 package-info.java 文件中。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.annotation.PackageAnnotationCheck"/>
		<!-- 这项检查注解的位置。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck">
			<property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
		</module>

		<!-- Block Checks -->
		<!-- 检查空代码块。要求代码块中有文本 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck">
			<property name="option" value="text"/>
		</module>
		<!-- 检查代码块的左花括号的放置位置。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck">
			<property name="ignoreEnums" value="false"/>
		</module>
		<!-- 检查右大括号的放置位置。option: 右大括号是否单独一行显示，tokens: 定义检查的类型。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck">
			<property name="option" value="alone"/>
		</module>
		<!-- 检查是否应该使用括号的地方没有加括号。tokens: 定义检查的类型 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck"/>
		<!-- 检查是否有嵌套的代码块。allowInSwitchCase: 定义是否允许 switch case 中使用嵌套的代码块 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.blocks.AvoidNestedBlocksCheck"/>

		<!-- 类设计 -->
		<!-- 只有私有构造器的类必须声明为 final -->
		<module name="com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck"/>
		<!-- 检查接口是否只定义了变量而没有定义方法，因为接口应该用来描述一个类型，所以只定义变量而不定义方法是不恰当的.allowMarkerInterfaces: 是否检查空接口-->
		<module name="com.puppycrawl.tools.checkstyle.checks.design.InterfaceIsTypeCheck"/>
		<!-- 查看文档 -->
		<module name="com.jcohy.checkstyle.check.SpringHideUtilityClassConstructor"/>
		<!-- 检查异常是不可变的 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck"/>
		<!-- 检查嵌套/内部的类型是否在当前类的最底部声明（在所有的方法/字段的声明之后）。-->
		<module name="com.puppycrawl.tools.checkstyle.checks.design.InnerTypeLastCheck"/>
		<!-- 检查每个顶级类、接口、枚举或注解是否位于其自己的源文件中。-->
		<module name="com.puppycrawl.tools.checkstyle.checks.design.OneTopLevelClassCheck"/>

		<!-- 编码 -->
		<!-- 检查是否 equals 的重载，如果有必须明确指定 Object 类型。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.CovariantEqualsCheck"/>
		<!-- 检查空语句。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.EmptyStatementCheck"/>
		<!-- 检查 equals 语句，文字位于左侧，变量在右侧。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck"/>
		<!-- 检查在重写了 equals 方法后是否重写了 hashCode 方法 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.EqualsHashCodeCheck"/>
		<!-- 检查子表达式中是否有赋值语句 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.InnerAssignmentCheck"/>
		<!-- 检查子表达式中是否有赋值语句 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.NoEnumTrailingCommaCheck"/>
		<!-- 检查是否有魔法值 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck">
			<property name="ignoreHashCodeMethod" value="true"/>
			<property name="ignoreAnnotationElementDefaults" value="true"/>
		</module>
		<!-- 检查是否有过于复杂的布尔表达式。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanExpressionCheck"/>
		<!-- 检查是否有过于复杂的布尔类型 return 语句 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanReturnCheck"/>
		<!-- String 的比较不能用!= 和 == -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.StringLiteralEqualityCheck"/>
		<!-- 限制 for 循环的嵌套层数为 3 层 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.NestedForDepthCheck">
			<property name="max" value="3"/>
		</module>
		<!-- 限制 if 循环的嵌套层数为 3 层 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck">
			<property name="max" value="3"/>
		</module>
		<!-- 限制 try 代码块的嵌套层数为 3 层  -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.NestedTryDepthCheck">
			<property name="max" value="3"/>
		</module>
		<!-- 同一行不能有多个声明 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.MultipleVariableDeclarationsCheck"/>
		<!-- 检查每行是否只有一个语句。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"/>
		<!-- 在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；
		在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。-->
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.MissingSwitchDefaultCheck"/>
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.DefaultComesLastCheck"/>
		<module name="com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck"/>

		<!-- 导入 -->
		<!-- 检查 import 语句是否使用 * 符号 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.imports.AvoidStarImportCheck"/>
		<!-- 检查是否导入了不必显示导入的类 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.imports.RedundantImportCheck"/>
		<!-- 检查是否导入的包没有使用. processJavadoc: 检查是否处理 Javadoc 注解 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck">
			<property name="processJavadoc" value="true"/>
		</module>
		<!-- 检查导入顺序是否遵循 jcohy 约定 -->
		<module name="com.jcohy.checkstyle.check.SpringImportOrderCheck">
			<property name="projectRootPackage" value="${projectRootPackage}"/>
		</module>

		<!-- Javadoc 注释 -->
		<!-- 检查类或者接口的 javadoc 注解 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck">
			<property name="scope" value="package"/>
			<property name="authorFormat" value="^[a-zA-Z0-9]{2,20}"/>
		</module>
		<!-- 检查方法的 javadoc 注解 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck"/>
		<!-- 检查 public 变量的 javadoc 注解 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck">
			<property name="scope" value="public"/>
		</module>
		<!-- javadoc 风格。checkEmptyJavadoc：检查 javadoc 是否缺少描述文本-->
		<module name="com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck">
			<property name="checkEmptyJavadoc" value="true"/>
		</module>
		<!-- 检查块标签后面是否具有描述 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.javadoc.NonEmptyAtclauseDescriptionCheck"/>
		<!-- 检查块标签后的描述如果具有多行，指定连续行之间的缩进 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagContinuationIndentationCheck">
			<property name="offset" value="0"/>
		</module>
		<!-- 检查 javadoc 块标签或 javadoc 标签的顺序 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.javadoc.AtclauseOrderCheck">
			<property name="tagOrder"
					  value="@param, @author, @version, @since, @see, @serial, @deprecated"/>
			<property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF"/>
		</module>
		<!-- 检查 javadoc 块标签或 javadoc 标签的顺序 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.javadoc.AtclauseOrderCheck">
			<property name="tagOrder"
					  value="@param, @return, @throws, @since, @see, @deprecated"/>
			<property name="target" value="METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
		</module>


		<!-- 杂项 -->
		<!-- 控制注释和周围代码之间的缩进 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck">
			<property name="tokens" value="BLOCK_COMMENT_BEGIN"/>
		</module>
		<!-- 检查初始化 long 变量时，数字後是加了大写字母'L'而不是小写字母'l' -->
		<module name="com.puppycrawl.tools.checkstyle.checks.UpperEllCheck"/>
		<!-- 【强制】中括号是数组类型的一部分，数组定义如下：String[] args; -->
		<module name="com.puppycrawl.tools.checkstyle.checks.ArrayTypeStyleCheck"/>
		<!-- 检查外部类型名称和文件名是否匹配 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.OuterTypeFilenameCheck"/>

		<!-- 修饰符 -->
		<!-- 检查是否有多余的修饰符 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck"/>
		<!-- 检查修饰符的顺序 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck"/>

		<!-- 命名风格 -->
		<!-- 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。-->
		<module name="com.puppycrawl.tools.checkstyle.checks.naming.IllegalIdentifierNameCheck">
			<property name="format" value="^(?!(_|\$))(?!.*?(_|\$)$)"/>
		</module>
		<!-- 抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。目前仅支持抽象类。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.naming.AbstractClassNameCheck">
			<property name="format" value="^(Abstract|Base).+$"/>
		</module>
		<module name="com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheck">
			<property name="format" value="^log(ger)?$|^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
		</module>


		<!-- Regexp -->
		<!-- 检查单行是否匹配一条给定的正则表达式 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck">
			<property name="maximum" value="0"/>
			<property name="format"
					  value="org\.mockito\.(Mockito|BDDMockito)\.(when|doThrow|doAnswer)"/>
			<property name="message"
					  value="Please use BDD-style (given, when, then) using BDDMockito imports."/>
			<property name="ignoreComments" value="true"/>
		</module>
		<!-- 检查单行是否匹配一条给定的正则表达式 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck">
			<property name="maximum" value="0"/>
			<property name="format"
					  value="org\.junit\.(Assert|jupiter\.api\.Assertions)\.assert"/>
			<property name="message"
					  value="Please use AssertJ imports."/>
			<property name="ignoreComments" value="true"/>
		</module>
		<!-- 检查指定的正则表达式是否存在、存在的次数少于设定的次数，或者在文件中不存在。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck">
			<property name="format" value="[ \t]+$"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Trailing whitespace"/>
		</module>


		<!-- Whitespace -->
		<!-- 检查泛型标记 < 和 > 的周围的空格是否遵守标准规约 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"/>
		<!-- 检查方法定义、构造器定义、方法调用、构造器调用的标识符和参数列表的左圆括号之间的填充符。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"/>
		<!-- 检查指定标记之后没有空格。若要禁用指定标记之后的换行符，将 allowLineBreaks 属性设为 false 即可。-->
		<module name="com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck">
			<property name="tokens"
					  value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS, ARRAY_DECLARATOR"/>
		</module>
		<!-- 检查指定标记之前没有空格。若要允许指定标记之前的换行符，将 allowLineBreaks 属性设为 true 即可。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"/>
		<!-- 检查圆括号的填充符策略，也就是在左圆括号之后和右圆括号之前是否需要有一个空格。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"/>
		<!-- 检查类型转换的圆括号的填充符策略。也就是，在左圆括号之后和右圆括号之前是否需要有一个空格。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"/>
		<!-- 检查指定标记之后是否紧跟了空格。 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"/>
		<!-- 检查指定标记的周围是否有空格 -->
		<module name="com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"/>

		<!-- Spring Conventions -->
		<!--  -->
		<module name="com.jcohy.checkstyle.check.SpringAvoidStaticImportCheck">
			<property name="excludes" value="${avoidStaticImportExcludes}"/>
		</module>
		<!--  -->
		<module name="com.jcohy.checkstyle.check.SpringLambdaCheck"/>
		<!--  -->
		<module name="com.jcohy.checkstyle.check.SpringTernaryCheck"/>
		<!--  -->
		<module name="com.jcohy.checkstyle.check.SpringCatchCheck"/>
		<!--  -->
		<module name="com.jcohy.checkstyle.check.SpringJavadocCheck"/>
		<!--  -->
		<module name="com.jcohy.checkstyle.check.SpringLeadingWhitespaceCheck">
			<property name="indentationStyle" value="spaces"/>
		</module>
		<!--  -->
		<module name="com.jcohy.checkstyle.check.SpringMethodOrderCheck"/>
		<!--  -->
		<module name="com.jcohy.checkstyle.check.SpringMethodVisibilityCheck"/>
		<module name="com.jcohy.checkstyle.filter.RequiresOuterThisFilter"/>
		<module name="com.jcohy.checkstyle.filter.IdentCheckFilter">
			<property name="names" value="logger"/>
			<!-- 检查代码是否使用了“this.”. checkMethods: 是否检查方法调用.validateOnlyOverlapping 是否检查变量或参数的重叠 -->
			<module name="com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck">
				<property name="checkMethods" value="false"/>
				<property name="validateOnlyOverlapping" value="false"/>
			</module>
		</module>
		<module name="com.jcohy.checkstyle.check.SpringNoThisCheck">
			<property name="names" value="logger"/>
		</module>
		<module name="com.jcohy.checkstyle.check.naming.JcohyAbbreviationAsWordInNameCheck">
			<property name="allowedAbbreviationLength" value="0"/>
		</module>

	</module>
</module>
