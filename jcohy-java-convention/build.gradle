plugins {
	id "java-gradle-plugin"
	id 'com.gradle.plugin-publish' version '0.18.0'
}

dependencies {
	implementation("org.springframework.boot:spring-boot-gradle-plugin:2.6.11")
	implementation("io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE")
	implementation('com.fasterxml.jackson.core:jackson-databind:2.12.6.1')
	implementation("commons-codec:commons-codec:1.13")
	implementation("org.apache.maven:maven-embedder:3.6.2")
	implementation("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3")
	implementation("org.asciidoctor:asciidoctor-gradle-jvm:3.3.2")
//	implementation("org.asciidoctor:asciidoctor-gradle-jvm-pdf:3.3.2")
	implementation("org.gradle:test-retry-gradle-plugin:1.1.9")
	implementation("org.springframework:spring-core:5.3.22")
	implementation("org.springframework:spring-web:5.3.22")
	implementation("io.spring.javaformat:spring-javaformat-gradle-plugin:${javaFormatVersion}")
	testImplementation("org.assertj:assertj-core:3.11.1")
	testImplementation('com.alibaba:fastjson:1.2.83')
	testImplementation("com.google.code.gson:gson:2.8.4")
	testImplementation('org.apache.logging.log4j:log4j-core:2.12.4')
	testImplementation("org.junit.jupiter:junit-jupiter:5.6.0")
}

pluginBundle {
	website = 'https://github.com/jcohy/jcohy-gradle-plugins'
	vcsUrl = 'https://github.com/jcohy/jcohy-gradle-plugins'
	tags = ['JavaConventions', 'Deployed', 'OptionalDependencies',"Asciidoctor"]
}

gradlePlugin {
	plugins {
		conventionsPlugin {
			id = 'com.jcohy.convention'
			displayName = 'JavaConvention,MavenConvention,AsciidoctorConvention'
			description = 'The plugin provides configuration with three conventions. Conventions when using the JavaBasePlugin, conventions when using the MavenPublishPlugin plugin, conventions when using the AsciidoctorJPlugin plugin'
			implementationClass = 'com.jcohy.convention.conventions.ConventionsPlugin'
		}
		greetingsPlugin {
			id = 'com.jcohy.optional-dependencies'
			displayName = 'Optional Dependencies Plugins'
			description = 'Added support for Maven-style optional dependencies.'
			implementationClass = 'com.jcohy.convention.optional.OptionalDependenciesPlugin'
		}
	}
}

test {
	useJUnitPlatform()
}
