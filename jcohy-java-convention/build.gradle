plugins {
	id "java-gradle-plugin"
	id 'com.gradle.plugin-publish' version '0.18.0'
}

dependencies {
	implementation("org.springframework.boot:spring-boot-gradle-plugin:${SpringBootVersion}")
	implementation("io.spring.gradle:dependency-management-plugin:${SpringBootDependencyVersion}")
	implementation('com.fasterxml.jackson.core:jackson-databind')
	implementation("commons-codec:commons-codec")
	implementation("org.apache.maven:maven-embedder:3.8.6")
	implementation("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3")
	implementation("org.asciidoctor:asciidoctor-gradle-jvm:3.3.2")
	implementation("org.gradle:test-retry-gradle-plugin:1.1.9")
	api("org.springframework:spring-core")
	api("org.springframework:spring-web")
	implementation("io.spring.javaformat:spring-javaformat-gradle-plugin:${JavaFormatVersion}")
	testImplementation("org.assertj:assertj-core")
	testImplementation('com.alibaba:fastjson:2.0.13')
	testImplementation("com.google.code.gson:gson")
	testImplementation('org.apache.logging.log4j:log4j-core')
	testImplementation("org.junit.jupiter:junit-jupiter")
}

pluginBundle {
	website = 'https://github.com/jcohy/jcohy-gradle-plugins'
	vcsUrl = 'https://github.com/jcohy/jcohy-gradle-plugins'
	tags = ['JavaConventions', 'Deployed', 'OptionalDependencies', "Asciidoctor"]
}

gradlePlugin {
	plugins {
		conventionsPlugin {
			id = 'com.jcohy.convention'
			displayName = 'JavaConvention,MavenConvention,AsciidoctorConvention'
			description = 'The plugin provides configuration with three conventions. Conventions when using the JavaBasePlugin, conventions when using the MavenPublishPlugin plugin, conventions when using the AsciidoctorJPlugin plugin'
			implementationClass = 'com.jcohy.convention.conventions.ConventionsPlugin'
		}
		greetingsPlugin {
			id = 'com.jcohy.optional-dependencies'
			displayName = 'Optional Dependencies Plugins'
			description = 'Added support for Maven-style optional dependencies.'
			implementationClass = 'com.jcohy.convention.optional.OptionalDependenciesPlugin'
		}
	}
}

test {
	useJUnitPlatform()
}

repositories {
	mavenCentral()
}
